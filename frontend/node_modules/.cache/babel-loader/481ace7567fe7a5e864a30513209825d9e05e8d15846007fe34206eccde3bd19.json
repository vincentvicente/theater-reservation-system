{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:8080/api';\n\n// Create axios instance with default config\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nexport const theaterService = {\n  /**\n   * Get theater information and seating layout\n   */\n  async getTheater() {\n    try {\n      const response = await apiClient.get('/theater');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching theater data:', error);\n      throw new Error('Failed to load theater data');\n    }\n  },\n  /**\n   * Reserve seats\n   */\n  async reserveSeats(reservationData) {\n    try {\n      const response = await apiClient.post('/reserve', reservationData);\n      return response.data;\n    } catch (error) {\n      console.error('Error reserving seats:', error);\n      throw new Error('Failed to reserve seats');\n    }\n  },\n  /**\n   * Get current seating layout\n   */\n  async getSeating() {\n    try {\n      const response = await apiClient.get('/seating');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching seating data:', error);\n      throw new Error('Failed to load seating data');\n    }\n  }\n};\nexport default theaterService;","map":{"version":3,"names":["axios","API_BASE_URL","apiClient","create","baseURL","headers","theaterService","getTheater","response","get","data","error","console","Error","reserveSeats","reservationData","post","getSeating"],"sources":["/Users/vicentezhu/Desktop/theater-reservation-system/frontend/src/services/theaterService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = 'http://localhost:8080/api';\n\n// Create axios instance with default config\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\nexport const theaterService = {\n  /**\n   * Get theater information and seating layout\n   */\n  async getTheater() {\n    try {\n      const response = await apiClient.get('/theater');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching theater data:', error);\n      throw new Error('Failed to load theater data');\n    }\n  },\n\n  /**\n   * Reserve seats\n   */\n  async reserveSeats(reservationData) {\n    try {\n      const response = await apiClient.post('/reserve', reservationData);\n      return response.data;\n    } catch (error) {\n      console.error('Error reserving seats:', error);\n      throw new Error('Failed to reserve seats');\n    }\n  },\n\n  /**\n   * Get current seating layout\n   */\n  async getSeating() {\n    try {\n      const response = await apiClient.get('/seating');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching seating data:', error);\n      throw new Error('Failed to load seating data');\n    }\n  }\n};\n\nexport default theaterService;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,2BAA2B;;AAEhD;AACA,MAAMC,SAAS,GAAGF,KAAK,CAACG,MAAM,CAAC;EAC7BC,OAAO,EAAEH,YAAY;EACrBI,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;AAEF,OAAO,MAAMC,cAAc,GAAG;EAC5B;AACF;AACA;EACE,MAAMC,UAAUA,CAAA,EAAG;IACjB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMN,SAAS,CAACO,GAAG,CAAC,UAAU,CAAC;MAChD,OAAOD,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,MAAM,IAAIE,KAAK,CAAC,6BAA6B,CAAC;IAChD;EACF,CAAC;EAED;AACF;AACA;EACE,MAAMC,YAAYA,CAACC,eAAe,EAAE;IAClC,IAAI;MACF,MAAMP,QAAQ,GAAG,MAAMN,SAAS,CAACc,IAAI,CAAC,UAAU,EAAED,eAAe,CAAC;MAClE,OAAOP,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,MAAM,IAAIE,KAAK,CAAC,yBAAyB,CAAC;IAC5C;EACF,CAAC;EAED;AACF;AACA;EACE,MAAMI,UAAUA,CAAA,EAAG;IACjB,IAAI;MACF,MAAMT,QAAQ,GAAG,MAAMN,SAAS,CAACO,GAAG,CAAC,UAAU,CAAC;MAChD,OAAOD,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,MAAM,IAAIE,KAAK,CAAC,6BAA6B,CAAC;IAChD;EACF;AACF,CAAC;AAED,eAAeP,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}